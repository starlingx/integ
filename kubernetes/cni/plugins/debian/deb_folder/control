Source: golang-github-containernetworking-plugins
Section: golang
Priority: optional
Standards-Version: 4.6.1
Maintainer: StarlingX Developers <starlingx-discuss@lists.starlingx.io>
Build-Depends: debhelper-compat (= 13),
               dh-golang,
               golang-1.24,
               golang-dbus-dev (>= 5.0.2~),
               golang-github-alexflint-go-filemutex-dev,
               golang-github-appc-cni-dev (>= 1.0.1~),
               golang-github-coreos-go-iptables-dev (>= 0.4.5~),
               golang-github-coreos-go-systemd-dev (>= 20~),
               golang-github-d2g-dhcp4-dev,
               golang-github-d2g-dhcp4client-dev (>= 1.0.0~),
               golang-github-mattn-go-shellwords-dev,
               golang-github-networkplumbing-go-nft-dev,
               golang-github-onsi-ginkgo-dev,
               golang-github-safchain-ethtool-dev,
               golang-github-vishvananda-netlink-dev (>= 1.1.0.125~),
               golang-golang-x-sys-dev,
               golang-gomega-dev,
Homepage: https://www.starlingx.io
XS-Go-Import-Path: github.com/containernetworking/plugins
Rules-Requires-Root: no
Testsuite: autopkgtest-pkg-go

Package: golang-github-containernetworking-plugins-dev
Architecture: all
Multi-Arch: foreign
Depends: golang-github-alexflint-go-filemutex-dev,
         golang-github-appc-cni-dev (>= 1.0.1~),
         golang-github-coreos-go-iptables-dev (>= 0.4.5~),
         golang-github-safchain-ethtool-dev,
         golang-github-vishvananda-netlink-dev (>= 1.1.0.125~),
         golang-golang-x-sys-dev,
         ${misc:Depends},
Description: standard networking plugins - sources
 This package contains sources of the Container Networking Initiative's
 official plugins:
 .
 Interfaces
  - bridge: Creates a bridge, adds the host and the container to it.
  - ipvlan: Adds an [ipvlan] interface in the container.
  - loopback: Set the state of loopback interface to up.
  - macvlan: Creates a new MAC address, forwards all traffic
             to that to the container.
  - ptp: Creates a veth pair.
  - vlan: Allocates a vlan device.
  - host-device: Move an already-existing device into a container.
 .
 IPAM: IP Address Management
  - dhcp: Runs a daemon to make DHCP requests on behalf of the container.
  - host-local: Maintains a local database of allocated IPs
  - static: Allocates a static IPv4/IPv6 address.
 .
 Other
  - flannel: Generates an interface corresponding to a flannel config file
  - tuning: Tweaks sysctl parameters of an existing interface
  - portmap: An iptables-based portmapping plugin.
             Maps ports from the host's address space to the container.
  - bandwidth: Allows bandwidth-limiting through use of traffic control tbf.
  - sbr: Configures source based routing for an interface.
  - firewall: Uses iptables or firewalld to add rules to allow traffic
              to/from the container.

Package: containernetworking-plugins
Architecture: any
Provides: container-network-stack (= 1),
Built-Using: ${misc:Built-Using},
Depends: iptables,
         ${misc:Depends},
         ${shlibs:Depends},
Description: standard networking plugins - binaries
 This package contains binaries of the Container Networking Initiative's
 official plugins:
 .
 Interfaces
  - bridge: Creates a bridge, adds the host and the container to it.
  - ipvlan: Adds an ipvlan interface in the container.
  - loopback: Set the state of loopback interface to up.
  - macvlan: Creates a new MAC address, forwards all traffic
             to that to the container.
  - ptp: Creates a veth pair.
  - vlan: Allocates a vlan device.
  - host-device: Move an already-existing device into a container.
 .
 IPAM: IP Address Management
  - dhcp: Runs a daemon to make DHCP requests on behalf of the container.
  - host-local: Maintains a local database of allocated IPs
  - static: Allocates a static IPv4/IPv6 address.
 .
 Other
  - tuning: Tweaks sysctl parameters of an existing interface
  - portmap: An iptables-based portmapping plugin.
             Maps ports from the host's address space to the container.
  - bandwidth: Allows bandwidth-limiting through use of traffic control tbf.
  - sbr: Configures source based routing for an interface.
  - firewall: Uses iptables or firewalld to add rules to allow traffic
              to/from the container.
