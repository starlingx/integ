From: Eric Macdonald <eric.macdonald@windriver.com>
Date: Tue, 10 Dec 2024 17:05:13 +0000
Subject: Add retry to BootSourceOverrideMode handling

Redfishtool version 1.1.8 added a condition where if
'BootSourceOverrideMode' exists in the boot query response
then it adds the following to the Boot Source Override command
json string for the setBootOverride_single command.

"BootSourceOverrideMode": d["Boot"]["BootSourceOverrideMode"]

This change is leading to this Bad Request error for some servers.

redfishtool: Transport: Response Error: status_code: 400 -- Bad Request

Servers known to fail in this way are HP Proliant e910t, e920t as well
as DL360 and DL380 server models with HP iLO versions 3.01, 3.04 and
3.6.

This update introduces a legacy mode retry to the setBootOverride
operation if the new method fails in a 400 - Bad Request.

Signed-off-by: Eric Macdonald <eric.macdonald@windriver.com>
---
 redfishtoollib/Systems.py | 30 ++++++++++++++++++++++--------
 1 file changed, 22 insertions(+), 8 deletions(-)

diff --git a/redfishtoollib/Systems.py b/redfishtoollib/Systems.py
index a0be4ad..e2cbe01 100644
--- a/redfishtoollib/Systems.py
+++ b/redfishtoollib/Systems.py
@@ -182,7 +182,7 @@ class RfSystemsOperations():
     def __init__(self):
         self.systemsPath=None
         self.systemsCollectionDict=None
-
+        self.setBootOverride_legacy_mode=False
 
     def hello(self,sc,op,rft,cmdTop=False):
         rft.printVerbose(4,"in hello")
@@ -584,13 +584,19 @@ class RfSystemsOperations():
                 return(8,None,False,None)
             
             #form the patch data
-
-            # Get the value of "BootSourceOverrideTarget" property and pass it in the patch request.
-            # Some HW vendors need this property to be passed explicitly.
-            if "BootSourceOverrideMode" in d["Boot"]:
-                patchData={"Boot": {"BootSourceOverrideEnabled": enabledVal, "BootSourceOverrideTarget": targetVal, "BootSourceOverrideMode": d["Boot"]["BootSourceOverrideMode"] } }
-            else:
+            if self.setBootOverride_legacy_mode:
+                # Some servers don't like the BootSourceOverrideMode added to the payload
+                # even when BootSourceOverrideMode is set in d["Boot"].
+                # The caller has the option to set self.setBootOverride_legacy_mode True
+                # and call this function to use the 'legacy' mode patchData.
                 patchData={"Boot": {"BootSourceOverrideEnabled": enabledVal, "BootSourceOverrideTarget": targetVal } }
+            else:
+                # Get the value of "BootSourceOverrideTarget" property and pass it in the patch request.
+                # Some HW vendors need this property to be passed explicitly.
+                if "BootSourceOverrideMode" in d["Boot"]:
+                    patchData={"Boot": {"BootSourceOverrideEnabled": enabledVal, "BootSourceOverrideTarget": targetVal, "BootSourceOverrideMode": d["Boot"]["BootSourceOverrideMode"] } }
+                else:
+                    patchData={"Boot": {"BootSourceOverrideEnabled": enabledVal, "BootSourceOverrideTarget": targetVal } }
 
             #call the generic patch command to send the patch.  This takes care of etag support
             rc,r,j,d=rft.patchResource(rft, r, patchData)
@@ -605,7 +611,15 @@ class RfSystemsOperations():
 
 
     def setBootOverride(self, sc, op, rft, cmdTop=False, prop=None):
-        return op.iterate_op(op.setBootOverride_single, sc, op, rft, cmdTop=cmdTop, prop=prop)
+        rc,r,j,d=op.iterate_op(op.setBootOverride_single, sc, op, rft, cmdTop=cmdTop, prop=prop)
+        if ( rc == 5 and r is not None ):
+            # added a retry in legacyMode if the http response
+            # in 'r' is <Response [400]> - Bad Request
+            if r.status_code == 400:
+                rft.printVerbose(0,"   redfishtool: setBootOverride operation failed, retrying in legacy mode")
+                self.setBootOverride_legacy_mode = True
+                rc,r,j,d=op.iterate_op(op.setBootOverride_single, sc, op, rft, cmdTop=cmdTop, prop=prop)
+        return(rc,r,j,d)
 
 
     def getProcessors(self,sc,op, rft, cmdTop=False, prop=None):
