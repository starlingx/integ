From 06d3e581486cc8f931c8599e4b7b3faea3ddf64f Mon Sep 17 00:00:00 2001
From: Andre Mauricio Zelak <andre.zelak@windriver.com>
Date: Wed, 16 Oct 2024 18:10:24 -0300
Subject: [PATCH 61/62] Fix HA clock selection algorithm

The issue reported is a particular case of a BC configured with
redundant PTP clocks with same priority. When a clock recovers
from a failure, as both clock were configured with same priority
it's expected the active clock source to remain active. But if
the recovered clock presented a better local clock class than
active, it was being selected active. This specific case was fixed.

Closes-bug: 2084723

Test plan: BC with same priority
PASS: Start the PTP service with all clocks out of requirements,
one is selected, no matter which one.
PASS: Then, when the backup clock recovers from failure it is
selected active.
PASS: Then, when the other clock recovers from failure it remains
as backup, no matter the local clock class.
PASS: Then, when the active goes out of requirement, the backup
is set active.

Test plan: GM with same priority
PASS: Start the PTP service with all clocks out of requirements,
one is selected, no matter which one.
PASS: Then, when the backup clock recovers from failure it is selected
active.
PASS: Then, when the other clock recovers from failure it remains
as backup, no matter the local clock class.
PASS: Then, when the active goes out of requirement, the backup
is set active.

Signed-off-by: Andre Mauricio Zelak <andre.zelak@windriver.com>
---
 phc2sys.c | 4 ----
 1 file changed, 4 deletions(-)

diff --git a/phc2sys.c b/phc2sys.c
index 9e8751f..e493b34 100644
--- a/phc2sys.c
+++ b/phc2sys.c
@@ -1160,7 +1160,6 @@ static struct clock* check_and_select_clock(struct phc2sys_private *priv, struct
 	struct clock *active = priv->master, *candidate = NULL;
 	int stability_timer = 0;
 	struct timespec now;
-	int active_clock_class, candidate_clock_class;
 
 	/* Active source degrades - re-run ha_select_clock algorithm */
 	if ((active->node->new_dds && !clock_match_ha_dds_requirements(active, cfg)) ||
@@ -1195,10 +1194,7 @@ static struct clock* check_and_select_clock(struct phc2sys_private *priv, struct
 		/* new clock candidate */
 
 		/* candidate has equal priority and clockClass than active - don't change active */
-		active_clock_class = active->node->dds.clockQuality.clockClass;
-		candidate_clock_class = candidate->node->dds.clockQuality.clockClass;
 		if ((active->ha_priority == candidate->ha_priority) &&
-			(active_clock_class == candidate_clock_class) &&
 			clock_match_ha_requirements(active, cfg)) {
 			return NULL;
 		}
-- 
2.34.1

